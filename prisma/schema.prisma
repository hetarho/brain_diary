generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  provider   Provider
  providerId String
  avatar     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  engrams    Engram[]
  entries    Entry[]

  @@unique([provider, providerId])
  @@map("users")
}

model Entry {
  id        String   @id @default(cuid())
  content   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  engrams   Engram[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("entries")
}

model Engram {
  id                  String                 @id @default(cuid())
  content             String
  importance          Float                  @default(0.5)
  rehearsalCount      Int                    @default(0)
  lastActivatedAt     DateTime               @default(now())
  decayRate           Float                  @default(0.1)
  currentStrength     Float                  @default(1.0)
  consolidationState  ConsolidationState     @default(FRESH)
  category            MemoryType
  keywords            String[]
  entryId             String
  userId              String
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  cortex              CortexStore?           @relation("CortexEngram")
  emotionTags         EmotionTag[]
  entry               Entry                  @relation(fields: [entryId], references: [id], onDelete: Cascade)
  user                User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  hippocampus         HippocampusStore?      @relation("HippocampusEngram")
  context             MemoryContext?
  interferingMemories MemoryInterference[]   @relation("InterferingMemory")
  targetInterferences MemoryInterference[]   @relation("TargetInterference")
  reconsolidations    ReconsolidationEvent[]
  synapseFrom         Synapse[]              @relation("FromEngram")
  synapseTo           Synapse[]              @relation("ToEngram")

  @@map("engrams")
}

model Synapse {
  id              String      @id @default(cuid())
  fromEngramId    String
  toEngramId      String
  strength        Float       @default(0.5)
  type            SynapseType @default(ASSOCIATIVE)
  createdAt       DateTime    @default(now())
  activationCount Int         @default(0)
  lastActivatedAt DateTime?
  plasticityRate  Float       @default(0.1)
  threshold       Float       @default(0.5)
  history         Json?
  fromEngram      Engram      @relation("FromEngram", fields: [fromEngramId], references: [id], onDelete: Cascade)
  toEngram        Engram      @relation("ToEngram", fields: [toEngramId], references: [id], onDelete: Cascade)

  @@unique([fromEngramId, toEngramId])
  @@map("synapses")
}

model HippocampusStore {
  id             String   @id @default(cuid())
  engramId       String   @unique
  rawData        Json
  accessCount    Int      @default(0)
  lastAccessedAt DateTime @default(now())
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  engram         Engram   @relation("HippocampusEngram", fields: [engramId], references: [id], onDelete: Cascade)

  @@map("hippocampus_store")
}

model CortexStore {
  id             String   @id @default(cuid())
  engramId       String   @unique
  compressedData Json
  generalization Float    @default(0.0)
  integratedAt   DateTime
  createdAt      DateTime @default(now())
  engram         Engram   @relation("CortexEngram", fields: [engramId], references: [id], onDelete: Cascade)

  @@map("cortex_store")
}

model ReconsolidationEvent {
  id          String                 @id @default(cuid())
  engramId    String
  triggerType ReconsolidationTrigger
  beforeState Json
  afterState  Json
  createdAt   DateTime               @default(now())
  engram      Engram                 @relation(fields: [engramId], references: [id], onDelete: Cascade)

  @@map("reconsolidation_events")
}

model EmotionTag {
  id        String      @id @default(cuid())
  engramId  String
  emotion   EmotionType
  intensity Float
  valence   Float
  arousal   Float
  createdAt DateTime    @default(now())
  engram    Engram      @relation(fields: [engramId], references: [id], onDelete: Cascade)

  @@map("emotion_tags")
}

model MemoryContext {
  id            String   @id @default(cuid())
  engramId      String   @unique
  location      String?
  timeOfDay     String?
  weather       String?
  season        String?
  peoplePresent String[]
  activity      String?
  physicalState Json?
  engram        Engram   @relation(fields: [engramId], references: [id], onDelete: Cascade)

  @@map("memory_contexts")
}

model MemoryInterference {
  id                String           @id @default(cuid())
  targetEngramId    String
  interferingId     String
  type              InterferenceType
  similarity        Float
  impact            Float
  createdAt         DateTime         @default(now())
  interferingEngram Engram           @relation("InterferingMemory", fields: [interferingId], references: [id], onDelete: Cascade)
  targetEngram      Engram           @relation("TargetInterference", fields: [targetEngramId], references: [id], onDelete: Cascade)

  @@map("memory_interferences")
}

enum Provider {
  GOOGLE
  APPLE
}

enum MemoryType {
  EXPERIENCE
  PERSON
  PLACE
  LEARNING
  MENTAL
  FEELING
  WORK
  RELATIONSHIP
  HOBBY
  HEALTH
  TRAVEL
  OTHER
}

enum ConsolidationState {
  FRESH
  CONSOLIDATING
  CONSOLIDATED
  DECAYING
}

enum SynapseType {
  ASSOCIATIVE
  TEMPORAL
  EMOTIONAL
  SEMANTIC
}

enum ReconsolidationTrigger {
  RETRIEVAL
  ASSOCIATION
  EMOTIONAL
  CONTEXTUAL
}

enum EmotionType {
  JOY
  SADNESS
  ANGER
  FEAR
  SURPRISE
  DISGUST
  TRUST
  ANTICIPATION
}

enum InterferenceType {
  PROACTIVE
  RETROACTIVE
  CONTEXTUAL
}
